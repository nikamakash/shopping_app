from flask import Flask, render_template, request, redirect, url_for, sessionimport sqlite3import datetimeimport pytzapp = Flask(__name__)app.secret_key = 'akash'@app.route('/', methods=['POST', 'GET'])def index():    session['total_bill'] = 0.00    return render_template("index.html")@app.route('/dashboard', methods=['POST', 'GET'])def dashboard():    return render_template("dashboard.html")@app.route('/admin', methods=['POST', 'GET'])def admin():    cursor = sqlite3.connect("shop.db").cursor()    cursor.execute("select * from products")    data = cursor.fetchall()    return render_template('admin_panel.html', data=data)@app.route('/admin/newproduct', methods=['POST', 'GET'])def newproduct():    if request.method == "POST":        name = request.form['name']        price = request.form['price']        quantity = request.form['quantity']        conn = sqlite3.connect("shop.db")        cursor = conn.cursor()        insert = 'insert into products(itemname,item_price,quantity) VALUES(?,?,?)'        cursor.execute(insert, (name, price, quantity))        conn.commit()        conn.close()        return redirect(url_for("admin"))    return render_template('newproduct.html')@app.route("/admin/users", methods=['POST', 'GET'])def allusers():    cursor = sqlite3.connect("shop.db").cursor()    cursor.execute("select * from customer;")    res = cursor.fetchall()    return render_template("users.html", res=res)@app.route("/admin/updateproduct/<int:id>", methods=['POST', 'GET'])def updateproduct(id):    if request.method == "POST":        conn = sqlite3.connect("shop.db")        cursor = conn.cursor()        name = request.form['name']        price = request.form['price']        quantity = request.form['quantity']        update = "UPDATE products SET itemname = ?, item_price = ?, quantity = ? WHERE item_id = ?;"        cursor.execute(update, (name, price, quantity, id))        conn.commit()        conn.close()        return redirect(url_for("admin"))    conn = sqlite3.connect("shop.db")    cursor = conn.cursor()    cursor.execute("select * from products WHERE item_id=? ", (id,))    data = cursor.fetchall()    conn.close()    return render_template('updateproduct.html', data=data)@app.route("/admin/deleteproduct/<int:id>", methods=['POST', 'GET'])def deleteproduct(id):    conn = sqlite3.connect("shop.db")    cursor = conn.cursor()    delete = "DELETE FROM products WHERE item_id = ?"    cursor.execute(delete, (id,))    conn.commit()    conn.close()    return redirect(url_for("admin"))@app.route("/myorders", methods=["GET", "POST"])def myorders():    cursor = sqlite3.connect("shop.db").cursor()    cursor.execute("select * from orders where id=?", (session['user'],))    data = cursor.fetchall()    return render_template('myorders.html', data=data)@app.route("/myorders/cancelorder/<int:id>")def cancelorder(id):    conn = sqlite3.connect("shop.db")    cursor = conn.cursor()    cursor.execute("delete from orders where order_id=?", (id,))    conn.commit()    cursor.execute("delete from order_details where order_id=?", (id,))    conn.commit()    conn.close()    return redirect(url_for("myorders"))@app.route("/myorders/<int:id>", methods=["GET", "POST"])def order_details(id):    cursor = sqlite3.connect("shop.db").cursor()    cursor.execute("select * from order_details where order_id=?", (id,))    data = cursor.fetchall()    return render_template("order_details.html", data=data)@app.route('/register', methods=['POST', 'GET'])def register():    if request.method == "POST":        name = request.form['name']        email = request.form['email']        password = request.form['password']        mobile = request.form['mobile']        address = request.form['address']        conn = sqlite3.connect("shop.db")        cursor = conn.cursor()        insert = "insert into customer(name,email_id,password,mobile,address) VALUES(?,?,?,?,?)"        cursor.execute(insert, (name, email, password, mobile, address))        conn.commit()        conn.close()        return redirect(url_for("login"))    return render_template('register.html')@app.route("/adminlogin", methods=['POST', 'GET'])def adminlogin():    if request.method == "POST":        email = request.form['email']        password = request.form['password']        if email == "arnofficial@hotmail.com" and password == "root123":            return redirect(url_for("admin"))        return render_template("adminlogin.html")    return render_template("adminlogin.html")@app.route('/login', methods=['POST', 'GET'])def login():    if request.method == "POST":        email = request.form['email']        password = request.form['password']        session['email'] = request.form['email']        session['password'] = request.form['password']        cursor = sqlite3.connect("shop.db").cursor()        cursor.execute("select * from customer WHERE email_id=? and password=?", (email, password))        res = cursor.fetchone()        if res is not None:            session['user'] = res[0]            session['cart'] = []            session['buy_product'] = []            return redirect(url_for("shopping"))        return redirect(url_for("login"))    return render_template('login.html')@app.route('/shopping', methods=['POST', 'GET'])def shopping():    if request.method == "POST":        if 'cart' not in session:            session['cart'] = []        cart = [(request.form.get("addtocart")), 0]        cart_list = session['cart']        cart_list.append(cart)        session['cart'] = cart_list    print(session['cart'])    cursor = sqlite3.connect("shop.db").cursor()    cursor.execute("select * from products")    data = cursor.fetchall()    return render_template('shopping.html', data=data)@app.route('/shopping/confirmmyorder', methods=['POST', 'GET'])def confirmmyorder():    data = []    IST = pytz.timezone('Asia/Kolkata')    d = datetime.datetime.now(IST).strftime("%d/%m/%Y, %H:%M:%S")    conn = sqlite3.connect("shop.db")    cursor = conn.cursor()    cursor.execute("select * from customer WHERE id = ?", (session['user'],))    res = cursor.fetchone()    conn.commit()    conn.close()    if res is not None:        info = [res[1], res[5], res[4], d]    else:        info = ['', '', '', d]    if request.method == "POST":        conn = sqlite3.connect("shop.db")        cursor = conn.cursor()        insert = "insert into orders(id,price,date,delivery_status,address) values(?,?,?,'Shipped',?)"        cursor.execute(insert, (session['user'], session['total_bill'], d, info[1]))        conn.commit()        get_id = "SELECT max(order_id) from orders WHERE id=?"        cursor.execute(get_id, (session['user'],))        orderid = cursor.fetchone()        conn.close()        order_id = orderid[0]        print("orderid", orderid)        od = "insert into order_details values(?,?,?,?,?)"        if len(session['buy_product']) == 1:            conn = sqlite3.connect("shop.db")            cursor = conn.cursor()            cursor.execute("select * from products WHERE item_id=?", (session['buy_product'][0][0],))            res = cursor.fetchone()            cursor.execute(od, (order_id, res[0], res[1], res[2], int(session['buy_product'][0][1])))            conn.commit()            conn.close()            return render_template("thanku.html")        return redirect(url_for("shopping"))    if len(session['buy_product']) > 0:        conn = sqlite3.connect("shop.db")        cursor = conn.cursor()        cursor.execute("select * from products WHERE item_id=?", (int(session['buy_product'][0][0]),))        res = cursor.fetchone()        conn.close()        bill = int(res[2]) * int(session['buy_product'][0][1])        session['total_bill'] += int(bill)        data.append((res[0], res[1], res[2], int(session['buy_product'][0][1]), int(bill)))        return render_template('confirmmyorder.html', data=data, total_bill=session['total_bill'], info=info)    return redirect(url_for("dashboard"))@app.route('/shopping/confirmorder', methods=['POST', 'GET'])def confirmorder():    data = []    IST = pytz.timezone('Asia/Kolkata')    d = datetime.datetime.now(IST).strftime("%d/%m/%Y, %H:%M:%S")    conn = sqlite3.connect("shop.db")    cursor = conn.cursor()    cursor.execute("select * from customer WHERE id = ?", (session['user'],))    res = cursor.fetchone()    conn.commit()    conn.close()    info = [res[1], res[5], res[4], d]    if request.method == "POST":        conn = sqlite3.connect("shop.db")        cursor = conn.cursor()        insert = "insert into orders(id,price,date,delivery_status,address) values(?,?,?,'Shipped',?)"        cursor.execute(insert, (session['user'], session['total_bill'], d, info[1]))        conn.commit()        get_id = "SELECT max(order_id) from orders WHERE id=?"        cursor.execute(get_id, (session['user'],))        orderid = cursor.fetchone()        conn.commit()        conn.close()        order_id = orderid[0]        od = "insert into order_details values(?,?,?,?,?)"        if len(session['cart']) > 0:            conn = sqlite3.connect("shop.db")            cursor = conn.cursor()            for i in range(len(session['cart'])):                cursor.execute("select * from products WHERE item_id=?", (int(session['cart'][i][0]),))                res = cursor.fetchone()                cursor.execute(od, (order_id, res[0], res[1], res[2], int(session['cart'][i][1])))                conn.commit()            conn.close()            return render_template("thanku.html")        return redirect(url_for("shopping"))    if len(session['cart']) > 0:        conn = sqlite3.connect("shop.db")        cursor = conn.cursor()        for i in range(len(session['cart'])):            cursor.execute("select * from products WHERE item_id=?", (int(session['cart'][i][0]),))            res = cursor.fetchone()            bill = int(res[2]) * int(session['cart'][i][1])            print(bill)            print(session['total_bill'])            print(res[2])            print(session['cart'][i])            session['total_bill'] += int(bill)            data.append((res[0], res[1], res[2], int(session['cart'][i][1]), int(bill)))        conn.close()        return render_template('confirmorder.html', data=data, total_bill=session['total_bill'], info=info)    return redirect(url_for("dashboard"))@app.route("/thanku")def thanku():    return render_template("thanku.html")@app.route("/logout")def logout():    session.pop('user', None)    session.pop('cart', None)    session.pop('buy_product', None)    session.pop('total_bill', None)    return redirect(url_for("index"))@app.route("/shopping/buynow/<int:id>", methods=['POST', 'GET'])def buynow(id):    if request.method == "POST":        session['buy_product'] = []        session['buy_product'].append([id, int(request.form["qty"])])        return redirect(url_for("confirmmyorder"))    if 'buy_product' in session:        session['buy_product'].clear()    cursor = sqlite3.connect("shop.db").cursor()    cursor.execute("select * from products WHERE item_id=?", (id,))    res = [cursor.fetchone()]    return render_template('buynow.html', data=res)@app.route("/shopping/cart", methods=['POST', 'GET'])def mycart():    if request.method == "POST":        cart = session['cart']        for i in range(len(cart)):            cart[i][1] = (request.form[str(i)])            print(cart[i][1])        session['cart'] = cart.copy()        print(session['cart'])        cart.clear()        return redirect(url_for("confirmorder"))    cursor = sqlite3.connect("shop.db").cursor()    data = []    p = 0    for i in session['cart']:        cursor.execute("select * from products WHERE item_id=?", (i[0],))        res = cursor.fetchone()        data.append((p, res[1], res[2]))        p += 1    return render_template('cart.html', data=data)@app.route("/shopping/cart/remove/<int:id>", methods=['POST', 'GET'])def removeitem(id):    rem = session['cart']    del rem[id]    session['cart'] = rem    return redirect(url_for("mycart"))if __name__ == "__main__":    app.run(port=5000)